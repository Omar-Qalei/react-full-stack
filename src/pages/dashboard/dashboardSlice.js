import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { ProductService } from '../../services/product/product-service';

const _productService = new ProductService();

const initialState = {
  products: [],
  productStatus: 'idle',
};

export const getProductsAsync = createAsyncThunk(
  'dashboard/getProducts',
  async (data) => {
    const response = await _productService.getProducts(data);
    console.log(response)
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const addProductAsync = createAsyncThunk(
  'dashboard/addProduct',
  async (data) => {
    const response = await _productService.addProduct(data);
    console.log(response)
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const modifyProductAsync = createAsyncThunk(
  'dashboard/modifyProduct',
  async (data) => {
    const response = await _productService.modifyProduct(data);
    console.log(response)
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const removeProductAsync = createAsyncThunk(
  'dashboard/removeProduct',
  async (data) => {
    console.log(data)
    const { id } = data;
    const response = await _productService.removeProduct(id);
    console.log(response)
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const dashboardSlice = createSlice({
  name: 'dashboard',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
      builder
      .addCase(getProductsAsync.pending, (state) => {
        state.productStatus = 'loading';
      })
      .addCase(getProductsAsync.fulfilled, (state, action) => {
        state.productStatus = 'fetched';
        console.log('addCase fetched', action.payload)
        state.products = action.payload;
      })
      .addCase(addProductAsync.pending, (state) => {
        state.productStatus = 'loading';
      })
      .addCase(addProductAsync.fulfilled, (state, action) => {
        state.productStatus = 'added';
        console.log('addCase added', action.payload)
        // state.products = action.payload;
      })
      .addCase(modifyProductAsync.pending, (state) => {
        state.productStatus = 'loading';
      })
      .addCase(modifyProductAsync.fulfilled, (state, action) => {
        state.productStatus = 'modified';
        console.log('addCase modified', action.payload)
        // state.products = action.payload;
      })
      .addCase(removeProductAsync.pending, (state) => {
        state.productStatus = 'loading';
      })
      .addCase(removeProductAsync.fulfilled, (state, action) => {
        state.productStatus = 'removed';
        console.log('addCase removed', action.payload)
        // state.products = action.payload;
      })
      ;
  },
});

export default dashboardSlice.reducer;
